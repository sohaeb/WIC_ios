# Customise this file, documentation can be found here:
# https://github.com/fastlane/fastlane/tree/master/fastlane/docs
# All available actions: https://docs.fastlane.tools/actions
# can also be listed using the `fastlane actions` command

# Change the syntax highlighting to Ruby
# All lines starting with a # are ignored when running `fastlane`

# If you want to automatically update fastlane if a new version is available:
 update_fastlane

# This is the minimum version number required.
# Update this, if you use features of a newer version
fastlane_version "2.50.1"

default_platform :ios

 # 1 - (((( cert, produce, sigh ))))
 # --- Cr8 A-code sing certificate + B- provisioning profile + C- itunes app ----

  desc "Creating a code signing certificate and provisioning profile"
  lane :provision do
    produce(
      app_name: 'windsorislamiccouncil',
      language: 'English',
      app_version: '1.0',
      sku: '123abc'
    )                 ###### Create new iOS apps on iTunes Connect and Dev Portal using your command line
    cert              ###### Automatically create and maintain iOS code signing certificates.
    sigh(force: true) ###### create, renew, download and repair provisioning profiles
  end



# 2 - (((( snapshit ))))
# --- Take screenshots ----

  desc "Take screenshots"
  lane :screenshot do
    snapshot
    frameit(white: true)

    # snapshot(
    # workspace: 'wic.xcworkspace',
    #  scheme: 'windsorislamiccouncilUITests',
    #  devices: ['iPhone 6s'],
    #  output_simulator_logs: false
    #)
    
  end




# 3 - (((( gym ))))
# --- Create ipa ----

 desc "Create ipa"
  lane :build do
    increment_build_number
    
    gym(scheme: 'wic')
  end




# 4 - ((((( Deliver + Precheck )))))
# Upload to App Store

   desc "Upload to App Store"
    # Automatically uses precheck
  lane :upload do
    deliver( 
      metadata_path: "./metadata"
    )
  end

  error do |lane, exception|
  # This block is called if there was an error running a lane.
  end



# 5 - ((((( Scan ))))) // use if you want to UI test all devices
# The easiest way to run tests of your iOS and Mac app

 desc "Runs all the tests"
  lane :test do

    scan(scheme: 'wic')
  end

# 6 - (((DO all)))

 desc "Provision, take screenshots, build and upload to App Store"
  lane :do_everything do
    provision
    screenshot
    build
    upload
  end


############################################
platform :ios do
  before_all do
    # ENV["SLACK_URL"] = "https://hooks.slack.com/services/..."
    cocoapods
    
  end

############################################
 

############################################
  desc "Submit a new Beta Build to Apple TestFlight"
  desc "This will also make sure the profile is up to date"

  lane :beta do
    # match(type: "appstore") # more information: https://codesigning.guide
     gym(scheme: "wic",
     workspace: "wic.xcworkspace"
     ) # Build your app - more options available
    pilot

    # sh "your_script.sh"
    # You can also use other beta testing services here (run `fastlane actions`)
  end

############################################
  desc "Deploy a new version to the App Store"

  lane :release do
  snapshot                  # Generate screenshots for the App Store
  gym                       # Build your app
  deliver                   # Upload the screenshots and the binary to iTunes
    # match(type: "appstore")
    increment_build_number
    testflight
    deliver(force: true)
    # frameit
  end

  ############################################

  # You can define as many lanes as you want

  after_all do |lane|
    # This block is called, only if the executed lane was successful

    # slack(
    #   message: "Successfully deployed new App Update."
    # )
  end

  error do |lane, exception|
    # slack(
    #   message: exception.message,
    #   success: false
    # )
  end
end

